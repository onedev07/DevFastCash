{"version":3,"sources":["../../../../src/utils/analytics/rudderstackClient.ts"],"sourcesContent":["import RudderAnalytics from '@expo/rudder-sdk-node';\nimport * as ciInfo from 'ci-info';\nimport os from 'os';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport UserSettings from '../../api/user/UserSettings';\nimport { getUserAsync } from '../../api/user/user';\nimport { env } from '../env';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nlet client: RudderAnalytics | null = null;\nlet identified = false;\nlet identifyData: {\n  userId: string;\n  deviceId: string;\n  traits: Record<string, any>;\n} | null = null;\n\nfunction getClient(): RudderAnalytics {\n  if (client) {\n    return client;\n  }\n\n  client = new RudderAnalytics(\n    env.EXPO_STAGING || env.EXPO_LOCAL\n      ? '24TKICqYKilXM480mA7ktgVDdea'\n      : '24TKR7CQAaGgIrLTgu3Fp4OdOkI', // expo unified\n    'https://cdp.expo.dev/v1/batch',\n    {\n      flushInterval: 300,\n    }\n  );\n\n  // Install flush on exit...\n  process.on('SIGINT', () => client?.flush?.());\n  process.on('SIGTERM', () => client?.flush?.());\n\n  return client;\n}\n\nexport async function setUserDataAsync(userId: string, traits: Record<string, any>): Promise<void> {\n  if (env.EXPO_NO_TELEMETRY) {\n    return;\n  }\n\n  const deviceId = await UserSettings.getAnonymousIdentifierAsync();\n\n  identifyData = {\n    userId,\n    deviceId,\n    traits,\n  };\n\n  ensureIdentified();\n}\n\ntype Event =\n  | 'action'\n  | 'Open Url on Device'\n  | 'Start Project'\n  | 'Serve Manifest'\n  | 'Serve Expo Updates Manifest'\n  | 'dev client start command'\n  | 'dev client run command';\n\nexport function logEvent(event: Event, properties: Record<string, any> = {}): void {\n  if (env.EXPO_NO_TELEMETRY) {\n    return;\n  }\n\n  ensureIdentified();\n\n  const { userId, deviceId } = identifyData ?? {};\n  const commonEventProperties = { source_version: process.env.__EXPO_VERSION, source: 'expo' };\n\n  const identity = { userId: userId ?? undefined, anonymousId: deviceId ?? uuidv4() };\n  getClient().track({\n    event,\n    properties: { ...properties, ...commonEventProperties },\n    ...identity,\n    context: getContext(),\n  });\n}\n\n/** Log event while ensuring the user is identified. */\nexport async function logEventAsync(\n  event: Event,\n  properties: Record<string, any> = {}\n): Promise<void> {\n  if (env.EXPO_NO_TELEMETRY) {\n    return;\n  }\n\n  await getUserAsync().catch(() => null);\n  ensureIdentified();\n\n  const { userId, deviceId } = identifyData ?? {};\n  const commonEventProperties = { source_version: process.env.__EXPO_VERSION, source: 'expo' };\n\n  const identity = { userId: userId ?? undefined, anonymousId: deviceId ?? uuidv4() };\n  getClient().track({\n    event,\n    properties: { ...properties, ...commonEventProperties },\n    ...identity,\n    context: getContext(),\n  });\n}\n\nfunction ensureIdentified(): void {\n  if (env.EXPO_NO_TELEMETRY || identified || !identifyData) {\n    return;\n  }\n\n  getClient().identify({\n    userId: identifyData.userId,\n    anonymousId: identifyData.deviceId,\n    traits: identifyData.traits,\n  });\n  identified = true;\n}\n\n/** Exposed for testing only */\nexport function getContext(): Record<string, any> {\n  const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n  return {\n    os: { name: platform, version: os.release() },\n    device: { type: platform, model: platform },\n    app: { name: 'expo', version: process.env.__EXPO_VERSION },\n    ci: ciInfo.isCI ? { name: ciInfo.name, isPr: ciInfo.isPR } : undefined,\n  };\n}\n"],"names":["setUserDataAsync","logEvent","logEventAsync","getContext","ciInfo","PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","client","identified","identifyData","getClient","RudderAnalytics","env","EXPO_STAGING","EXPO_LOCAL","flushInterval","process","on","flush","userId","traits","EXPO_NO_TELEMETRY","deviceId","UserSettings","getAnonymousIdentifierAsync","ensureIdentified","event","properties","commonEventProperties","source_version","__EXPO_VERSION","source","identity","undefined","anonymousId","uuidv4","track","context","getUserAsync","catch","identify","platform","os","name","version","release","device","type","model","app","ci","isCI","isPr","isPR"],"mappings":"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"}